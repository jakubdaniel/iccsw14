\pdfminorversion=4

\documentclass{beamer}

\def\event{{ICCSW'14}}

\ifdefined\withcomments
  \usetheme[event=\event,footlineauthor,comments]{D3S}
\else
  \usetheme[event=\event,footlineauthor]{D3S}
\fi

\usepackage{color}
\usepackage{colortbl}
\usepackage{listings}
\usepackage{multirow}

\definecolor{d3s_keyword}{RGB}{0, 112, 192}

\title{Predicate Abstraction in Program Verification: Survey and Current Trends}
\fancytitle{\vbox{\vskip-0.5em Predicate Abstraction in Program Verification:\\{\LARGE Survey and Current Trends}}}
\runningtitle{Predicate Abstraction in Program Verification}
\author{{\slshape \bfseries Jakub Daniel}, Pavel Par√≠zek}

\def\fakesc#1{\fakecap#1\egroup}
\def\fakecap#1{#1\bgroup\scriptsize}

\begin{document}
  \titleframe

  {
    \usebackgroundtemplate{
      \vbox{
        \vskip2cm\hbox to \hsize{\hfill\includegraphics{slides1.mps}}
      }
    }
    \begin{frame}{Motivation}
      \begin{itemize}
        \itemsep=2em
        \item Software is ubiquitous
        \item Bugs tend to be costly
        \item Testing is not enough
        \item Model checking is expensive
      \end{itemize}
    \end{frame}
  }

  {
    \usebackgroundtemplate{
      \vbox{
        \vskip2cm\hbox to \hsize{\hfill\includegraphics[scale=0.6]{slides3.mps}\hskip-0.5cm}
      }
    }
    \begin{frame}[fragile]{Example Target Program}
      \begin{lstlisting}[language=MyC]
  unsigned int n = (*\bf\color{darkblue} *{}*);
  unsigned int i = s = 0;

  for (i = 1; i <= n; ++i) {
      if (i < (*$\text{2}^\text{31}$*)) {
          s += 2;
      }
  }

  assert s == 2 * n || n == 0;
\end{lstlisting}
\begin{itemize}
\item Explore the entire state space
  \begin{itemize}
    \item Model Checking
    \item State space too large
  \end{itemize}
\end{itemize}
\end{frame}
  }

  {
    \usebackgroundtemplate{
      \vbox{
        \vskip2cm\hbox to \hsize{\hfill\includegraphics[scale=0.6]{slides4.mps}\hskip-0.5cm}
      }
    }
    \begin{frame}[fragile]{Abstraction Model Checking}
      \begin{lstlisting}[language=MyC]
  unsigned int n = (*\bf\color{darkblue} *{}*);
  unsigned int i = s = 0;

  for (i = 1; i <= n; ++i) {
      if (i < (*$\text{2}^\text{31}$*)) {
          s += 2;
      }
  }

  assert s == 2 * n || n == 0;
\end{lstlisting}
\begin{itemize}
\item Smaller state space
  \begin{itemize}
    \item Handle multiple states at once
  \end{itemize}
\item Predicate Abstraction
\end{itemize}
\end{frame}
  }

  \begin{frame}{Outline}
    \begin{columns}
      \begin{column}{0.45\textwidth}
        \begin{itemize}
          \item Predicate Abstraction
          \item Abstraction Refinement
          \item Lazy Abstraction
          \item \fakesc{IMPACT} Algorithm
          \item Further Enhancements
        \end{itemize}
      \end{column}
      \begin{column}{0.45\textwidth}
        \begin{itemize}
          \item Practice
            \begin{itemize}
              \item \fakesc{BLAST}
              \item \fakesc{WOLVERINE}
              \item \fakesc{{CPA}CHECKER}
              \item \fakesc{UFO}
            \end{itemize}
          \item Our Work
        \end{itemize}
      \end{column}
    \end{columns}
  \end{frame}

  \begin{frame}{Predicate Abstraction}
    \begin{itemize}
      \itemsep=2em
      \item No concrete values
      \item Data abstracted with predicates: {\tt x.f > 3}
      \item Statements interpreted with respect to effects on predicate values
    \end{itemize}
  \end{frame}

  {
    \usebackgroundtemplate{
      \vbox{
        %\vskip1.75cm\hbox to \hsize{\hfill\includegraphics[scale=0.75]{slides5.mps}\hskip-0.5cm}
      }
    }
    \begin{frame}{Abstraction Refinement}
      \begin{itemize}
        \itemsep=1em
        \item Counterexamples may be infeasible
        \item Check {\color{darkgreen}SAT} of logical formula encoding trace
          \begin{itemize}
            \item SMT solver for theory of arrays ({\tt QF\_LIA, QF\_BVA})
          \end{itemize}
      \end{itemize}
      {\scriptsize
         Interpolant I for $\varphi \equiv \text{A} \wedge \text{B} \equiv \bot$:
         \begin{itemize}
           \item {\tiny $\text{A} \Rightarrow \text{I}$}
           \item {\tiny $\text{I} \wedge \text{B} \equiv \bot$}
           \item {\tiny $\mathcal{L}\!\left(\text{I}\right) \subseteq \mathcal{L}\!\left(\text{A}\right) \cap \mathcal{L}\!\left(\text{B}\right)$}
         \end{itemize}
      }
    \end{frame}
  }

  \begin{frame}[fragile]{Abstraction Refinement - Example}
    \begin{lstlisting}[language=MyC,basicstyle=\tiny\tt]
  unsigned int n = (*\bf\color{d3s_keyword} *{}*);
  unsigned int i = @2s = 0@;

  for (@3i = 1@; @4@8i <= n@@; @7++i@) {
      if ((*\btHL<5>{i < $\text{2}^\text{31}$}*)) {
          @6s += 2@;
      }
  }

  assert @9s == 2 * n@ || n == 0;
\end{lstlisting}
\vskip1em
\invisible{\includegraphics<1>[scale=0.7]{slides6.mps}} % Reserve space
\includegraphics<2>[scale=0.7]{slides6.mps}
\includegraphics<3>[scale=0.7]{slides7.mps}
\includegraphics<4>[scale=0.7]{slides8.mps}
\includegraphics<5>[scale=0.7]{slides9.mps}
\includegraphics<6>[scale=0.7]{slides10.mps}
\includegraphics<7>[scale=0.7]{slides11.mps}
\includegraphics<8>[scale=0.7]{slides12.mps}
\includegraphics<9>[scale=0.7]{slides13.mps}
\includegraphics<10>[scale=0.7]{slides14.mps}
\includegraphics<11>[scale=0.7]{slides15.mps}
\includegraphics<12>[scale=0.7]{slides16.mps}
\includegraphics<13>[scale=0.7]{slides17.mps}
\includegraphics<14>[scale=0.7]{slides18.mps}
\includegraphics<15>[scale=0.7]{slides19.mps}
\includegraphics<16>[scale=0.7]{slides20.mps}
\end{frame}

  \begin{frame}[fragile]{Abstraction Refinement - Example Continued}
    \begin{columns}
      \begin{column}{0.50\textwidth}
    \begin{lstlisting}[language=MyC]
unsigned int n = (*\bf\color{d3s_keyword} *{}*);
unsigned int i = @2s = 0@;

for (@3i = 1@; @4@8i <= n@@; @7++i@) {
    if ((*\btHL<5>{i < $\text{2}^\text{31}$}*)) {
        @6s += 2@;
    }
}

assert @9s == 2 * n@ || n == 0;
\end{lstlisting}
\end{column}
\begin{column}{0.45\textwidth}
\tt\small
{\color{gray}\only<2>{\color{darkgreen}}$\text{s}_\text{1} = \text{0}$} \\
{\color{gray}\only<3,4,5>{\color{darkgreen}}$\text{2} \cdot \text{i}_\text{1} = \text{s}_\text{1} + \text{2}$} \\
{\color{gray}\only<4,5>{\color{darkgreen}}$\text{2} \cdot \text{n}_\text{1} \ge \text{s}_\text{1} + \text{2}$} \\
{\color{gray}\only<6>{\color{darkgreen}}$\text{2} \cdot \text{i}_\text{1} = \text{s}_\text{2}$} \\
{\color{gray}\only<6,7>{\color{darkgreen}}$\text{2} \cdot \text{n}_\text{1} \ge \text{s}_\text{2}$} \\
{\color{gray}\only<7>{\color{darkgreen}}$\text{2} \cdot \text{i}_\text{2} - \text{2} = \text{s}_\text{2}$} \\
{\color{gray}\only<8,9>{\color{darkgreen}}\only<9>{\bf}$\text{2} \cdot \text{n}_\text{1} = \text{s}_\text{2}$} \\
\end{column}
\end{columns}
\vskip1em
\uncover<9>{\hbox to \hsize{\hfill This particular error trace became unreachable \hfill}}
\end{frame}

  {
    \usebackgroundtemplate{
      \vbox{
        \vskip1.75cm\hbox to \hsize{\hfill\includegraphics[scale=0.8]{slides2.mps}\hskip-0.5cm}
      }
    }
    \begin{frame}{Counterexample-Guided Abstraction Refinement}
      \begin{itemize}
        \itemsep=1.5em
        \item Begin with no predicates
        \item Explore state space
        \item Safe if no counterexample is found
        \item Check feasibility of counterexamples
        \item Exclude infeasible traces by refinement
        \item Report any feasible counterexample
      \end{itemize}
    \end{frame}
  }

  \begin{frame}{Lazy Abstraction}
    \begin{itemize}
      \item TODO img statespace (explored), counterexample, refinement, no need to explore things twice
    \end{itemize}
  \end{frame}

  \subtitleframe{\fakesc{B\Large{}LAST} \\ \vskip1em \small (Lazy Predicate Abstraction)}

  \begin{frame}{\fakesc{I\large{}MPACT} Algorithm}
    \begin{itemize}
      \item Not necessary to compute abstract post operator at all, just refine (go forward blindly)
      \item According to some comparison (Beyer) not very different from Lazy
    \end{itemize}
  \end{frame}

  \subtitleframe{\fakesc{W\Large{}OLVERINE} \\ \vskip1em \small (Even Lazier Predicate Abstraction - \fakesc{IMPACT} Algorithm)}

  \begin{frame}{Further Enhancements}
    \begin{itemize}
      \item Block encoding
      \item Refinement (do not simply refine along single trace)
    \end{itemize}
  \end{frame}

  \subtitleframe{\fakesc{{CPA}\Large{}CHECKER} \\ \vskip1em \small (Configurable Verification Platform)}
  \subtitleframe{\fakesc{U\Large{}FO} \\ \vskip1em \small (Verification Framework)}

  \begin{frame}{Our Research}
    \begin{itemize}
      \item \ldots
    \end{itemize}
  \end{frame}

  \subtitleframe{\fakesc{P\Large{}ANDA} \\ \vskip1em \small \url{https://github.com/d3sformal/panda.git}}

  {
    \usebackgroundtemplate{\vbox to \vsize{\vfill\hbox to \hsize{\hfill\tiny see \url{https://github.com/d3sformal/panda.git}}\vskip-1cm}}
    \begin{frame}{\fakesc{P\large{}ANDA}: {\large{}Predicate Abstraction in Dynamic Analysis}}
      \begin{itemize}
        \item Verification tool for Java
        \item Built on top of Java Pathfinder
      \end{itemize}
    \end{frame}
  }

  {
    \usebackgroundtemplate{\vbox to \vsize{%
      \vfill%
      \hbox to \hsize{\hskip2em\scalebox{0.5}{*) Aggregated results of different BMC-based tools: LLBMC, \fakesc{FRANKEN}\fakesc{BIT}, CBMC}\hfil}
      \vskip0.5em%
      \hbox to \hsize{\hfill\tiny see \url{http://sv-comp.sosy-lab.org}}%
      \vskip-1cm%
    }}
    \begin{frame}{Competition on Software Verification}
      \begin{itemize}
        \item Library of benchmarks in C
        \item Categories: {\scriptsize BitVectors, ControlFlow, DeviceDrivers, Recursive, Concurrency, \ldots}
        \item TACAS'14
      \end{itemize}
      \definecolor{gold}{HTML}{FFD700}
      \definecolor{silver}{HTML}{C0C0C0}
      \definecolor{bronze}{HTML}{8C7853}
      \def\fst{\cellcolor{gold}}
      \def\snd{\cellcolor{silver}}
      \def\trd{\cellcolor{bronze}}
      \centering
      \scalebox{0.75}{\vbox{
        \begin{tabular}{p{1.2cm}p{1cm}p{2cm}p{1cm}p{1cm}}
                                   & \fakesc{BLAST}      & \fakesc{{CPA}CHECKER} & \fakesc{UFO}        & BMC*                \\
          \multirow{2}{*}{BV}      & \multirow{2}{*}{--} & \trd\tiny 78          & \multirow{2}{*}{--} & \fst\tiny 86        \\
                                   &                     & \trd\tiny 690s        &                     & \fst\tiny 39s       \\
          \multirow{2}{*}{CF}      & \tiny 508           & \fst\tiny 1\ 009      & \trd\tiny 912       & \snd\tiny 986       \\
                                   & \tiny 32\ 000s      & \fst\tiny 9\ 000s     & \trd\tiny 14\ 000s  & \snd\tiny 6\ 300s   \\
          \multirow{2}{*}{DD}      & \fst\tiny 2\ 682    & \tiny 2\ 613          & \snd\tiny 2\ 642    & \trd\tiny 2\ 639    \\
                                   & \fst\tiny 13\ 000s  & \tiny 28\ 000s        & \snd\tiny 5\ 700s   & \trd\tiny 3\ 000s   \\
          \\
          \multirow{2}{*}{Overall} & \multirow{2}{*}{--} & \snd\tiny 2\ 987      & \multirow{2}{*}{--} & \fst\tiny 3\ 501    \\
                                   &                     & \snd\tiny 48\ 000s    &                     & \fst\tiny 560\ 000s \\
        \end{tabular}
      }}
    \end{frame}
  }

  \begin{frame}{Wrap Up}
  \end{frame}
\end{document}
